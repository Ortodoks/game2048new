// –ú–æ–¥—É–ª—å –≤—ã–±–æ—Ä–∞ —Å–∫–∏–Ω–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
class SkinSelector {
    constructor() {
        this.currentSkin = 'default';
        this.ownedSkins = ['default'];
        this.skins = window.SKIN_CONFIGS || {};
        
        this.init();
    }

    async init() {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ userManager
        while (!window.userManager || !window.userManager.isInitialized) {
            await new Promise(resolve => setTimeout(resolve, 100));
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–∏–Ω–∞—Ö
        this.loadSkinData();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
        this.initUI();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        this.checkUrlParameters();
        
        console.log('SkinSelector initialized:', {
            current: this.currentSkin,
            owned: this.ownedSkins
        });
    }

    checkUrlParameters() {
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('openSkinSelector') === 'true') {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–∫–∏–Ω–æ–≤
            setTimeout(() => {
                this.openSelector();
                // –û—á–∏—â–∞–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä
                window.history.replaceState({}, document.title, window.location.pathname);
            }, 500);
        }
    }

    loadSkinData() {
        if (window.userManager && window.userManager.settings) {
            this.currentSkin = window.userManager.settings.activeSkin || 'default';
            this.ownedSkins = window.userManager.settings.purchasedSkins || ['default'];
        } else {
            // Fallback –∫ localStorage
            this.currentSkin = localStorage.getItem('currentSkin') || 'default';
            this.ownedSkins = JSON.parse(localStorage.getItem('ownedSkins') || '["default"]');
        }
    }

    initUI() {
        const changeSkinBtn = document.getElementById('change-skin-btn');
        const modal = document.getElementById('skin-selector-modal');
        const closeBtn = document.getElementById('close-skin-selector-btn');

        if (changeSkinBtn) {
            changeSkinBtn.addEventListener('click', () => this.openSelector());
        }

        if (closeBtn) {
            closeBtn.addEventListener('click', () => this.closeSelector());
        }

        if (modal) {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.closeSelector();
                }
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updateCurrentSkinDisplay();
        this.populateSkinGrid();
    }

    openSelector() {
        const modal = document.getElementById('skin-selector-modal');
        if (modal) {
            modal.classList.add('active');
            this.updateCurrentSkinDisplay();
            this.populateSkinGrid();
        }
    }

    closeSelector() {
        const modal = document.getElementById('skin-selector-modal');
        if (modal) {
            modal.classList.remove('active');
        }
    }

    updateCurrentSkinDisplay() {
        const displayElement = document.getElementById('current-skin-name');
        if (displayElement && this.skins[this.currentSkin]) {
            displayElement.textContent = this.skins[this.currentSkin].name;
        }
    }

    populateSkinGrid() {
        const grid = document.getElementById('skin-selector-grid');
        if (!grid) return;

        grid.innerHTML = '';

        Object.entries(this.skins).forEach(([skinId, skinData]) => {
            const isOwned = this.ownedSkins.includes(skinId);
            const isActive = this.currentSkin === skinId;

            const card = document.createElement('div');
            card.className = 'skin-card';
            
            if (isActive) card.classList.add('active');
            if (!isOwned) card.classList.add('locked');

            card.innerHTML = `
                <div class="skin-preview">${skinData.preview}</div>
                <div class="skin-name">${skinData.name}</div>
                ${!isOwned ? `<div class="skin-price">${skinData.price} –º–æ–Ω–µ—Ç</div>` : ''}
                ${isActive ? '<div class="skin-price">‚úì –ê–∫—Ç–∏–≤–µ–Ω</div>' : ''}
            `;

            if (isOwned && !isActive) {
                card.addEventListener('click', () => this.selectSkin(skinId));
            } else if (!isOwned) {
                card.addEventListener('click', () => this.showBuyMessage(skinData.name));
            }

            grid.appendChild(card);
        });
    }

    async selectSkin(skinId) {
        if (!this.ownedSkins.includes(skinId)) {
            console.warn('–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –∫—É–ø–ª–µ–Ω–Ω—ã–π —Å–∫–∏–Ω:', skinId);
            return;
        }

        this.currentSkin = skinId;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if (window.userManager && window.userManager.isInitialized) {
            await window.userManager.setActiveSkin(skinId);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem('currentSkin', skinId);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–Ω –∫ –≥—Ä–∞—Ñ–∏–∫–µ
        if (window.graphics) {
            await window.graphics.changeSkin(skinId);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateCurrentSkinDisplay();
        this.populateSkinGrid();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showMessage(`–°–∫–∏–Ω "${this.skins[skinId].name}" –ø—Ä–∏–º–µ–Ω—ë–Ω! üé®`);

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
        if (window.audioManager) {
            window.audioManager.playSound('move');
        }

        console.log('–°–∫–∏–Ω –∏–∑–º–µ–Ω–µ–Ω:', skinId);
    }

    showBuyMessage(skinName) {
        this.showMessage(`–°–∫–∏–Ω "${skinName}" –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ üõí`);
        
        // –ú–æ–∂–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω
        setTimeout(() => {
            this.closeSelector();
            const shopBtn = document.getElementById('shop-btn');
            if (shopBtn) {
                shopBtn.click();
            }
        }, 1500);
    }

    showMessage(text) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–≤–æ—é
        const message = document.createElement('div');
        message.className = 'skin-change-message';
        message.textContent = text;
        message.style.cssText = `
            position: fixed;
            top: 20%;
            left: 50%;
            transform: translateX(-50%);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 25px;
            border-radius: 30px;
            font-weight: 600;
            z-index: 1003;
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
            animation: slideDown 0.3s ease-out;
        `;

        document.body.appendChild(message);

        setTimeout(() => {
            message.style.animation = 'slideUp 0.3s ease-out';
            setTimeout(() => {
                if (message.parentNode) {
                    message.parentNode.removeChild(message);
                }
            }, 300);
        }, 2500);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Å–∫–∏–Ω–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏)
    async refreshOwnedSkins() {
        this.loadSkinData();
        this.populateSkinGrid();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (typeof window !== 'undefined') {
    window.skinSelector = null;
    
    document.addEventListener('DOMContentLoaded', async () => {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        await new Promise(resolve => setTimeout(resolve, 500));
        
        window.skinSelector = new SkinSelector();
    });
}
